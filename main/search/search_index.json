{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":""},{"location":"#overview","title":"Overview","text":"<p>TODO</p>"},{"location":"#motivation","title":"Motivation","text":"<p>TODO</p>"},{"location":"#api-stability","title":"API stability","text":"<p> While <code>karbonn</code> is in development stage, no API is guaranteed to be stable from one release to the next. In fact, it is very likely that the API will change multiple times before a stable 1.0.0 release. In practice, this means that upgrading <code>karbonn</code> to a new version will possibly break any code that was using the old version of <code>karbonn</code>.</p>"},{"location":"#license","title":"License","text":"<p><code>karbonn</code> is licensed under BSD 3-Clause \"New\" or \"Revised\" license available in LICENSE file.</p>"},{"location":"get_started/","title":"Get Started","text":"<p>It is highly recommended to install in a virtual environment to keep your system in order.</p>"},{"location":"get_started/#installing-with-pip-recommended","title":"Installing with <code>pip</code> (recommended)","text":"<p>The following command installs the latest version of the library:</p> <pre><code>pip install karbonn\n</code></pre> <p>To make the package as slim as possible, only the packages required to use <code>karbonn</code> are installed. It is possible to install all the optional dependencies by running the following command:</p> <pre><code>pip install 'karbonn[all]'\n</code></pre> <p>This command also installed NumPy and PyTorch. It is also possible to install the optional packages manually or to select the packages to install. In the following example, only NumPy is installed:</p> <pre><code>pip install karbonn numpy\n</code></pre>"},{"location":"get_started/#installing-from-source","title":"Installing from source","text":"<p>To install <code>karbonn</code> from source, you can follow the steps below. First, you will need to install <code>poetry</code>. <code>poetry</code> is used to manage and install the dependencies. If <code>poetry</code> is already installed on your machine, you can skip this step. There are several ways to install <code>poetry</code> so you can use the one that you prefer. You can check the <code>poetry</code> installation by running the following command:</p> <pre><code>poetry --version\n</code></pre> <p>Then, you can clone the git repository:</p> <pre><code>git clone git@github.com:durandtibo/karbonn.git\n</code></pre> <p>It is recommended to create a Python 3.8+ virtual environment. This step is optional so you can skip it. To create a virtual environment, you can use the following command:</p> <pre><code>make conda\n</code></pre> <p>It automatically creates a conda virtual environment. When the virtual environment is created, you can activate it with the following command:</p> <pre><code>conda activate karbonn\n</code></pre> <p>This example uses <code>conda</code> to create a virtual environment, but you can use other tools or configurations. Then, you should install the required package to use <code>karbonn</code> with the following command:</p> <pre><code>make install\n</code></pre> <p>This command will install all the required packages. You can also use this command to update the required packages. This command will check if there is a more recent package available and will install it. Finally, you can test the installation with the following command:</p> <pre><code>make unit-test-cov\n</code></pre>"},{"location":"refs/utils/","title":"Utils","text":""},{"location":"refs/utils/#karbonn.utils","title":"karbonn.utils","text":"<p>Contain utility functions.</p>"},{"location":"refs/utils/#karbonn.utils.freeze_module","title":"karbonn.utils.freeze_module","text":"<pre><code>freeze_module(module: Module) -&gt; None\n</code></pre> <p>Freeze the parameters of the given module.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to freeze.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import freeze_module\n&gt;&gt;&gt; module = torch.nn.Linear(4, 6)\n&gt;&gt;&gt; freeze_module(module)\n&gt;&gt;&gt; for name, param in module.named_parameters():\n...     print(name, param.requires_grad)\n...\nweight False\nbias False\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.get_module_device","title":"karbonn.utils.get_module_device","text":"<pre><code>get_module_device(module: Module) -&gt; device\n</code></pre> <p>Get the device used by this module.</p> <p>This function assumes the module uses a single device. If the module uses several devices, you should use <code>get_module_devices</code>. It returns <code>torch.device('cpu')</code> if the model does not have parameters.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module.</p> required <p>Returns:</p> Type Description <code>device</code> <p>The device</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import get_module_device\n&gt;&gt;&gt; get_module_device(torch.nn.Linear(4, 6))\ndevice(type='cpu')\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.get_module_devices","title":"karbonn.utils.get_module_devices","text":"<pre><code>get_module_devices(module: Module) -&gt; tuple[device, ...]\n</code></pre> <p>Get the devices used in a module.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module.</p> required <p>Returns:</p> Type Description <code>tuple[device, ...]</code> <p>The tuple of <code>torch.device</code>s used in the module.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import get_module_devices\n&gt;&gt;&gt; get_module_devices(torch.nn.Linear(4, 6))\n(device(type='cpu'),)\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.has_learnable_parameters","title":"karbonn.utils.has_learnable_parameters","text":"<pre><code>has_learnable_parameters(module: Module) -&gt; bool\n</code></pre> <p>Indicate if the module has learnable parameters.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to test.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the module has at least one learnable parameter, <code>False</code> otherwise.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import has_learnable_parameters, freeze_module\n&gt;&gt;&gt; has_learnable_parameters(torch.nn.Linear(4, 6))\nTrue\n&gt;&gt;&gt; module = torch.nn.Linear(4, 6)\n&gt;&gt;&gt; freeze_module(module)\n&gt;&gt;&gt; has_learnable_parameters(module)\nFalse\n&gt;&gt;&gt; has_learnable_parameters(torch.nn.Identity())\nFalse\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.has_parameters","title":"karbonn.utils.has_parameters","text":"<pre><code>has_parameters(module: Module) -&gt; bool\n</code></pre> <p>Indicate if the module has parameters.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to test.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the module has at least one parameter, <code>False</code> otherwise.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import has_parameters\n&gt;&gt;&gt; has_parameters(torch.nn.Linear(4, 6))\nTrue\n&gt;&gt;&gt; has_parameters(torch.nn.Identity())\nFalse\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.is_loss_decreasing","title":"karbonn.utils.is_loss_decreasing","text":"<pre><code>is_loss_decreasing(\n    module: Module,\n    criterion: Module | Callable[[Tensor, Tensor], Tensor],\n    optimizer: Optimizer,\n    feature: Tensor,\n    target: Tensor,\n    num_iterations: int = 1,\n    random_seed: int = 10772155803920552556,\n) -&gt; bool\n</code></pre> <p>Check if the loss decreased after some iterations.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to test. The module must have a single input tensor and a single output tensor.</p> required <code>criterion</code> <code>Module | Callable[[Tensor, Tensor], Tensor]</code> <p>The criterion to test.</p> required <code>optimizer</code> <code>Optimizer</code> <p>The optimizer to update the weights of the model.</p> required <code>feature</code> <code>Tensor</code> <p>The input of the module.</p> required <code>target</code> <code>Tensor</code> <p>The target used to compute the loss.</p> required <code>num_iterations</code> <code>int</code> <p>The number of optimization steps.</p> <code>1</code> <code>random_seed</code> <code>int</code> <p>The random seed to make the function deterministic if the module contains randomness.</p> <code>10772155803920552556</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the loss decreased after some iterations, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from torch import nn\n&gt;&gt;&gt; from karbonn.utils import is_loss_decreasing\n&gt;&gt;&gt; module = nn.Linear(4, 2)\n&gt;&gt;&gt; is_loss_decreasing(\n...     module=module,\n...     criterion=nn.MSELoss(),\n...     optimizer=SGD(module.parameters(), lr=0.01),\n...     feature=torch.rand(4, 4),\n...     target=torch.rand(4, 2),\n... )\nTrue\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.is_loss_decreasing_with_adam","title":"karbonn.utils.is_loss_decreasing_with_adam","text":"<pre><code>is_loss_decreasing_with_adam(\n    module: Module,\n    criterion: Module | Callable[[Tensor, Tensor], Tensor],\n    feature: Tensor,\n    target: Tensor,\n    lr: float = 0.0003,\n    num_iterations: int = 1,\n    random_seed: int = 10772155803920552556,\n) -&gt; bool\n</code></pre> <p>Check if the loss decreased after some iterations.</p> <p>The module is trained with the Adam optimizer.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to test. The module must have a single input tensor and a single output tensor.</p> required <code>criterion</code> <code>Module | Callable[[Tensor, Tensor], Tensor]</code> <p>The criterion to test.</p> required <code>feature</code> <code>Tensor</code> <p>The input of the module.</p> required <code>target</code> <code>Tensor</code> <p>The target used to compute the loss.</p> required <code>lr</code> <code>float</code> <p>The learning rate.</p> <code>0.0003</code> <code>num_iterations</code> <code>int</code> <p>The number of optimization steps.</p> <code>1</code> <code>random_seed</code> <code>int</code> <p>The random seed to make the function deterministic if the module contains randomness.</p> <code>10772155803920552556</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the loss decreased after some iterations, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from torch import nn\n&gt;&gt;&gt; from karbonn.utils import is_loss_decreasing_with_adam\n&gt;&gt;&gt; is_loss_decreasing_with_adam(\n...     module=nn.Linear(4, 2),\n...     criterion=nn.MSELoss(),\n...     feature=torch.rand(4, 4),\n...     target=torch.rand(4, 2),\n...     lr=0.0003,\n... )\nTrue\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.is_loss_decreasing_with_sgd","title":"karbonn.utils.is_loss_decreasing_with_sgd","text":"<pre><code>is_loss_decreasing_with_sgd(\n    module: Module,\n    criterion: Module | Callable[[Tensor, Tensor], Tensor],\n    feature: Tensor,\n    target: Tensor,\n    lr: float = 0.01,\n    num_iterations: int = 1,\n    random_seed: int = 10772155803920552556,\n) -&gt; bool\n</code></pre> <p>Check if the loss decreased after some iterations.</p> <p>The module is trained with the <code>torch.optim.SGD</code> optimizer.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to test. The module must have a single input tensor and a single output tensor.</p> required <code>criterion</code> <code>Module | Callable[[Tensor, Tensor], Tensor]</code> <p>The criterion to test.</p> required <code>feature</code> <code>Tensor</code> <p>The input of the module.</p> required <code>target</code> <code>Tensor</code> <p>The target used to compute the loss.</p> required <code>num_iterations</code> <code>int</code> <p>The number of optimization steps.</p> <code>1</code> <code>lr</code> <code>float</code> <p>The learning rate.</p> <code>0.01</code> <code>random_seed</code> <code>int</code> <p>The random seed to make the function deterministic if the module contains randomness.</p> <code>10772155803920552556</code> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the loss decreased after some iterations, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from torch import nn\n&gt;&gt;&gt; from karbonn.utils import is_loss_decreasing_with_adam\n&gt;&gt;&gt; is_loss_decreasing_with_adam(\n...     module=nn.Linear(4, 2),\n...     criterion=nn.MSELoss(),\n...     feature=torch.rand(4, 4),\n...     target=torch.rand(4, 2),\n...     lr=0.01,\n... )\nTrue\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.is_module_config","title":"karbonn.utils.is_module_config","text":"<pre><code>is_module_config(config: dict) -&gt; bool\n</code></pre> <p>Indicate if the input configuration is a configuration for a <code>torch.nn.Module</code>.</p> <p>This function only checks if the value of the key  <code>_target_</code> is valid. It does not check the other values. If <code>_target_</code> indicates a function, the returned type hint is used to check the class.</p> <p>Parameters:</p> Name Type Description Default <code>config</code> <code>dict</code> <p>The configuration to check.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the input configuration is a configuration for a <code>torch.nn.Module</code> object, otherwise <code>False</code>..</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from karbonn import is_module_config\n&gt;&gt;&gt; is_module_config({\"_target_\": \"torch.nn.Identity\"})\nTrue\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.is_module_on_device","title":"karbonn.utils.is_module_on_device","text":"<pre><code>is_module_on_device(module: Module, device: device) -&gt; bool\n</code></pre> <p>Indicate if all the parameters of a module are on the specified device.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module.</p> required <code>device</code> <code>device</code> <p>The device.</p> required <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if all the parameters of the module are on the specified device, otherwise <code>False</code>.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import is_module_on_device\n&gt;&gt;&gt; is_module_on_device(torch.nn.Linear(4, 6), torch.device(\"cpu\"))\nTrue\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.module_mode","title":"karbonn.utils.module_mode","text":"<pre><code>module_mode(module: Module) -&gt; Generator[None, None, None]\n</code></pre> <p>Implement a context manager that restores the mode (train or eval) of every submodule individually.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to restore the mode.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import module_mode\n&gt;&gt;&gt; module = torch.nn.ModuleDict(\n...     {\"module1\": torch.nn.Linear(4, 6), \"module2\": torch.nn.Linear(2, 4).eval()}\n... )\n&gt;&gt;&gt; print(module[\"module1\"].training, module[\"module2\"].training)\nTrue False\n&gt;&gt;&gt; with module_mode(module):\n...     module.eval()\n...     print(module[\"module1\"].training, module[\"module2\"].training)\n...\nModuleDict(\n  (module1): Linear(in_features=4, out_features=6, bias=True)\n  (module2): Linear(in_features=2, out_features=4, bias=True)\n)\nFalse False\n&gt;&gt;&gt; print(module[\"module1\"].training, module[\"module2\"].training)\nTrue False\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.num_learnable_parameters","title":"karbonn.utils.num_learnable_parameters","text":"<pre><code>num_learnable_parameters(module: Module) -&gt; int\n</code></pre> <p>Return the number of learnable parameters in the module.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to compute the number of learnable parameters.</p> required <p>Returns:</p> Name Type Description <code>int</code> <code>int</code> <p>The number of learnable parameters.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import num_learnable_parameters\n&gt;&gt;&gt; num_learnable_parameters(torch.nn.Linear(4, 6))\n30\n&gt;&gt;&gt; module = torch.nn.Linear(4, 6)\n&gt;&gt;&gt; freeze_module(module)\n&gt;&gt;&gt; num_learnable_parameters(module)\n0\n&gt;&gt;&gt; num_learnable_parameters(torch.nn.Identity())\n0\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.num_parameters","title":"karbonn.utils.num_parameters","text":"<pre><code>num_parameters(module: Module) -&gt; int\n</code></pre> <p>Return the number of parameters in the module.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to compute the number of parameters.</p> required <p>Returns:</p> Type Description <code>int</code> <p>The number of parameters.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import num_parameters\n&gt;&gt;&gt; num_parameters(torch.nn.Linear(4, 6))\n30\n&gt;&gt;&gt; num_parameters(torch.nn.Identity())\n0\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.setup_module","title":"karbonn.utils.setup_module","text":"<pre><code>setup_module(module: Module | dict) -&gt; Module\n</code></pre> <p>Set up a <code>torch.nn.Module</code> object.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module | dict</code> <p>The module or its configuration.</p> required <p>Returns:</p> Type Description <code>Module</code> <p>The instantiated <code>torch.nn.Module</code> object.</p> <p>Example usage:</p> <pre><code>&gt;&gt;&gt; from karbonn import setup_module\n&gt;&gt;&gt; linear = setup_module(\n...     {\"_target_\": \"torch.nn.Linear\", \"in_features\": 4, \"out_features\": 6}\n... )\n&gt;&gt;&gt; linear\nLinear(in_features=4, out_features=6, bias=True)\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.top_module_mode","title":"karbonn.utils.top_module_mode","text":"<pre><code>top_module_mode(\n    module: Module,\n) -&gt; Generator[None, None, None]\n</code></pre> <p>Implement a context manager that restores the mode (train or eval) of a given module.</p> <p>This context manager only restores the mode at the top-level.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to restore the mode.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import top_module_mode\n&gt;&gt;&gt; module = torch.nn.Linear(4, 6)\n&gt;&gt;&gt; print(module.training)\nTrue\n&gt;&gt;&gt; with top_module_mode(module):\n...     module.eval()\n...     print(module.training)\n...\nLinear(in_features=4, out_features=6, bias=True)\nFalse\n&gt;&gt;&gt; print(module.training)\nTrue\n</code></pre>"},{"location":"refs/utils/#karbonn.utils.unfreeze_module","title":"karbonn.utils.unfreeze_module","text":"<pre><code>unfreeze_module(module: Module) -&gt; None\n</code></pre> <p>Unfreeze the parameters of the given module.</p> <p>Parameters:</p> Name Type Description Default <code>module</code> <code>Module</code> <p>The module to unfreeze.</p> required <p>Example usage:</p> <pre><code>&gt;&gt;&gt; import torch\n&gt;&gt;&gt; from karbonn.utils import unfreeze_module\n&gt;&gt;&gt; module = torch.nn.Linear(4, 6)\n&gt;&gt;&gt; unfreeze_module(module)\n&gt;&gt;&gt; for name, param in module.named_parameters():\n...     print(name, param.requires_grad)\n...\nweight True\nbias True\n</code></pre>"}]}